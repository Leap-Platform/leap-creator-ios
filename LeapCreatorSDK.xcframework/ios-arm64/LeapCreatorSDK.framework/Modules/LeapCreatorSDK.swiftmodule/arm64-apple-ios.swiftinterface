// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LeapCreatorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
import zlib
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: LeapCreatorSDK.CompressionLevel
  public static let bestSpeed: LeapCreatorSDK.CompressionLevel
  public static let bestCompression: LeapCreatorSDK.CompressionLevel
  public static let defaultCompression: LeapCreatorSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: LeapCreatorSDK.GzipError.Kind, b: LeapCreatorSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: LeapCreatorSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: LeapCreatorSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
public protocol SampleAppDelegate : AnyObject {
  func sendInfo(infoDict: Swift.Dictionary<Swift.String, Any>)
}
@_inheritsConvenienceInitializers @objc public class LeapCreator : ObjectiveC.NSObject {
  @objc public static let shared: LeapCreatorSDK.LeapCreator
  @objc public func start(_ apiKey: Swift.String)
  public func openSampleApp(delegate: any LeapCreatorSDK.SampleAppDelegate)
  @objc override dynamic public init()
  @objc deinit
}
