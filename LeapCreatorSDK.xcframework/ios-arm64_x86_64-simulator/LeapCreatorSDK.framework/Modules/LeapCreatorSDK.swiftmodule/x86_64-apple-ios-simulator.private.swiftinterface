// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LeapCreatorSDK
import AVFoundation
import CoreData
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
import zlib
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: LeapCreatorSDK.CompressionLevel
  public static let bestSpeed: LeapCreatorSDK.CompressionLevel
  public static let bestCompression: LeapCreatorSDK.CompressionLevel
  public static let defaultCompression: LeapCreatorSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: LeapCreatorSDK.GzipError.Kind, b: LeapCreatorSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: LeapCreatorSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: LeapCreatorSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
public protocol SampleAppDelegate : AnyObject {
  func sendInfo(infoDict: Swift.Dictionary<Swift.String, Any>)
}
@_inheritsConvenienceInitializers @objc public class LeapCreator : ObjectiveC.NSObject {
  @objc public static let shared: LeapCreatorSDK.LeapCreator
  @objc public func start(_ apiKey: Swift.String)
  public func openSampleApp(delegate: any LeapCreatorSDK.SampleAppDelegate)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WfxLogEntry : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapCreatorSDK.WfxLogEntry {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapCreatorSDK.WfxLogEntry>
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdk: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogSession: LeapCreatorSDK.WfxLogSession? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class WfxLogSession : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LeapCreatorSDK.WfxLogSession {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LeapCreatorSDK.WfxLogSession>
  @objc @NSManaged dynamic public var appVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var extras: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sdkVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wfxLogEntries: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension LeapCreatorSDK.WfxLogSession {
  @objc(insertObject:inWfxLogEntriesAtIndex:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ value: LeapCreatorSDK.WfxLogEntry, at idx: Swift.Int)
  @objc(removeObjectFromWfxLogEntriesAtIndex:) @NSManaged dynamic public func removeFromWfxLogEntries(at idx: Swift.Int)
  @objc(insertWfxLogEntries:atIndexes:) @NSManaged dynamic public func insertIntoWfxLogEntries(_ values: [LeapCreatorSDK.WfxLogEntry], at indexes: Foundation.NSIndexSet)
  @objc(removeWfxLogEntriesAtIndexes:) @NSManaged dynamic public func removeFromWfxLogEntries(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInWfxLogEntriesAtIndex:withObject:) @NSManaged dynamic public func replaceWfxLogEntries(at idx: Swift.Int, with value: LeapCreatorSDK.WfxLogEntry)
  @objc(replaceWfxLogEntriesAtIndexes:withWfxLogEntries:) @NSManaged dynamic public func replaceWfxLogEntries(at indexes: Foundation.NSIndexSet, with values: [LeapCreatorSDK.WfxLogEntry])
  @objc(addWfxLogEntriesObject:) @NSManaged dynamic public func addToWfxLogEntries(_ value: LeapCreatorSDK.WfxLogEntry)
  @objc(removeWfxLogEntriesObject:) @NSManaged dynamic public func removeFromWfxLogEntries(_ value: LeapCreatorSDK.WfxLogEntry)
  @objc(addWfxLogEntries:) @NSManaged dynamic public func addToWfxLogEntries(_ values: Foundation.NSOrderedSet)
  @objc(removeWfxLogEntries:) @NSManaged dynamic public func removeFromWfxLogEntries(_ values: Foundation.NSOrderedSet)
}
